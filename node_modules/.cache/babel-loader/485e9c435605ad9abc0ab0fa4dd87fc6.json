{"ast":null,"code":"// 异步发送ajax请求的模块\n// 封装axios库\nimport axios from \"axios\";\nimport { message } from \"antd\";\nexport default function ajax(url, data = {}, type = 'GET') {\n  return new Promise((resolve, reject) => {\n    let promise; // 1.执行ajax请求\n\n    if (type === 'GET') {\n      promise = axios.get(url, {\n        params: data\n      });\n    } else {\n      promise = axios.post(url, data);\n    } // 2.如果成功了，调用resolve(value)\n\n\n    promise.then(response => {\n      resolve(response);\n    });\n  }).catch(error => {\n    // 3.如果失败了，不调用reject(reason),提示异常信息\n    message.error('请求出错了：', error.message);\n  });\n}","map":{"version":3,"sources":["E:/React/workspace/order-ticket/src/api/ajax.js"],"names":["axios","message","ajax","url","data","type","Promise","resolve","reject","promise","get","params","post","then","response","catch","error"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,eAAe,SAASC,IAAT,CAAcC,GAAd,EAAmBC,IAAI,GAAG,EAA1B,EAA8BC,IAAI,GAAG,KAArC,EAA4C;AAEvD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIC,OAAJ,CADoC,CAEpC;;AACA,QAAIJ,IAAI,KAAK,KAAb,EAAoB;AAChBI,MAAAA,OAAO,GAAGT,KAAK,CAACU,GAAN,CAAUP,GAAV,EAAe;AACrBQ,QAAAA,MAAM,EAAEP;AADa,OAAf,CAAV;AAGH,KAJD,MAIO;AACHK,MAAAA,OAAO,GAAGT,KAAK,CAACY,IAAN,CAAWT,GAAX,EAAgBC,IAAhB,CAAV;AACH,KATmC,CAUpC;;;AACAK,IAAAA,OAAO,CAACI,IAAR,CAAaC,QAAQ,IAAI;AACrBP,MAAAA,OAAO,CAACO,QAAD,CAAP;AACH,KAFD;AAIH,GAfM,EAeJC,KAfI,CAeEC,KAAK,IAAI;AACd;AACAf,IAAAA,OAAO,CAACe,KAAR,CAAc,QAAd,EAAwBA,KAAK,CAACf,OAA9B;AACH,GAlBM,CAAP;AAmBH","sourcesContent":["// 异步发送ajax请求的模块\r\n// 封装axios库\r\nimport axios from \"axios\"\r\nimport { message } from \"antd\"\r\n\r\nexport default function ajax(url, data = {}, type = 'GET') {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        let promise\r\n        // 1.执行ajax请求\r\n        if (type === 'GET') {\r\n            promise = axios.get(url, {\r\n                params: data\r\n            })\r\n        } else {\r\n            promise = axios.post(url, data)\r\n        }\r\n        // 2.如果成功了，调用resolve(value)\r\n        promise.then(response => {\r\n            resolve(response)\r\n        })\r\n\r\n    }).catch(error => {\r\n        // 3.如果失败了，不调用reject(reason),提示异常信息\r\n        message.error('请求出错了：', error.message)\r\n    })\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}