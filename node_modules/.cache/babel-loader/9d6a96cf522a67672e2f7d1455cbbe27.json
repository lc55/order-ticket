{"ast":null,"code":"// 异步发送ajax请求的模块\n// 封装axios库\nimport axios from \"axios\";\nimport { message } from \"antd\";\nimport storageUtils from \"../utils/storageUtils\";\nimport { pathIsDev } from '../common/methods';\nconst isAdmin = pathIsDev();\nexport default async function ajax(url, data = {}, type = 'GET') {\n  try {\n    return new Promise(resolve => {\n      let promise; // 1.执行ajax请求\n\n      if (type === 'GET') {\n        promise = axios.get(url, {\n          params: data\n        });\n      } else {\n        promise = axios.post(url, data);\n      } // 2.如果成功了，调用resolve(value)\n\n\n      promise.then(response => {\n        resolve(response.data);\n      });\n    });\n  } catch (error) {\n    // 3.如果失败了，不调用reject(reason),提示异常信息\n    message.error('请求出错了：', error.message);\n  }\n} // 请求拦截\n\naxios.interceptors.request.use(function (config) {\n  if (isAdmin) {\n    if (storageUtils.getAdminToken()) {\n      config.headers.Auth = storageUtils.getAdminToken();\n    }\n  } else {\n    if (storageUtils.getUserToken()) {\n      config.headers.Auth = storageUtils.getUserToken();\n    }\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // 响应拦截\n\naxios.interceptors.response.use(response => {\n  if (response.data.code === 101) {\n    source.cancel(); // 跳转登录页\n\n    if (isAdmin) {\n      window.location.href = \"/dev/login\";\n    } else {\n      window.location.href = \"/user/login\";\n    }\n  }\n\n  return response;\n}, error => {\n  return Promise.reject(error);\n});","map":{"version":3,"sources":["E:/React/workspace/order-ticket/src/api/ajax.js"],"names":["axios","message","storageUtils","pathIsDev","isAdmin","ajax","url","data","type","Promise","resolve","promise","get","params","post","then","response","error","interceptors","request","use","config","getAdminToken","headers","Auth","getUserToken","reject","code","source","cancel","window","location","href"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,MAAMC,OAAO,GAAGD,SAAS,EAAzB;AACA,eAAe,eAAeE,IAAf,CAAoBC,GAApB,EAAyBC,IAAI,GAAG,EAAhC,EAAoCC,IAAI,GAAG,KAA3C,EAAkD;AAE7D,MAAI;AACA,WAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC5B,UAAIC,OAAJ,CAD4B,CAE5B;;AACA,UAAIH,IAAI,KAAK,KAAb,EAAoB;AAChBG,QAAAA,OAAO,GAAGX,KAAK,CAACY,GAAN,CAAUN,GAAV,EAAe;AACrBO,UAAAA,MAAM,EAAEN;AADa,SAAf,CAAV;AAGH,OAJD,MAIO;AACHI,QAAAA,OAAO,GAAGX,KAAK,CAACc,IAAN,CAAWR,GAAX,EAAgBC,IAAhB,CAAV;AACH,OAT2B,CAU5B;;;AACAI,MAAAA,OAAO,CAACI,IAAR,CAAaC,QAAQ,IAAI;AACrBN,QAAAA,OAAO,CAACM,QAAQ,CAACT,IAAV,CAAP;AACH,OAFD;AAIH,KAfM,CAAP;AAgBH,GAjBD,CAiBE,OAAOU,KAAP,EAAc;AACZ;AACAhB,IAAAA,OAAO,CAACgB,KAAR,CAAc,QAAd,EAAwBA,KAAK,CAAChB,OAA9B;AACH;AACJ,C,CAED;;AACAD,KAAK,CAACkB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,UAAUC,MAAV,EAAkB;AAC7C,MAAIjB,OAAJ,EAAa;AACT,QAAIF,YAAY,CAACoB,aAAb,EAAJ,EAAkC;AAC9BD,MAAAA,MAAM,CAACE,OAAP,CAAeC,IAAf,GAAsBtB,YAAY,CAACoB,aAAb,EAAtB;AACH;AACJ,GAJD,MAIO;AACH,QAAIpB,YAAY,CAACuB,YAAb,EAAJ,EAAiC;AAC7BJ,MAAAA,MAAM,CAACE,OAAP,CAAeC,IAAf,GAAsBtB,YAAY,CAACuB,YAAb,EAAtB;AACH;AACJ;;AACD,SAAOJ,MAAP;AACH,CAXD,EAWG,UAAUJ,KAAV,EAAiB;AAChB,SAAOR,OAAO,CAACiB,MAAR,CAAeT,KAAf,CAAP;AACH,CAbD,E,CAeA;;AACAjB,KAAK,CAACkB,YAAN,CAAmBF,QAAnB,CAA4BI,GAA5B,CACIJ,QAAQ,IAAI;AACR,MAAIA,QAAQ,CAACT,IAAT,CAAcoB,IAAd,KAAuB,GAA3B,EAAgC;AAC5BC,IAAAA,MAAM,CAACC,MAAP,GAD4B,CAE5B;;AACA,QAAIzB,OAAJ,EAAa;AACT0B,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,YAAvB;AACH,KAFD,MAEO;AACHF,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,aAAvB;AACH;AACJ;;AACD,SAAOhB,QAAP;AACH,CAZL,EAaIC,KAAK,IAAI;AACL,SAAOR,OAAO,CAACiB,MAAR,CAAeT,KAAf,CAAP;AACH,CAfL","sourcesContent":["// 异步发送ajax请求的模块\r\n// 封装axios库\r\nimport axios from \"axios\"\r\nimport { message } from \"antd\"\r\nimport storageUtils from \"../utils/storageUtils\"\r\nimport { pathIsDev } from '../common/methods'\r\nconst isAdmin = pathIsDev()\r\nexport default async function ajax(url, data = {}, type = 'GET') {\r\n\r\n    try {\r\n        return new Promise((resolve) => {\r\n            let promise\r\n            // 1.执行ajax请求\r\n            if (type === 'GET') {\r\n                promise = axios.get(url, {\r\n                    params: data\r\n                })\r\n            } else {\r\n                promise = axios.post(url, data)\r\n            }\r\n            // 2.如果成功了，调用resolve(value)\r\n            promise.then(response => {\r\n                resolve(response.data)\r\n            })\r\n\r\n        })\r\n    } catch (error) {\r\n        // 3.如果失败了，不调用reject(reason),提示异常信息\r\n        message.error('请求出错了：', error.message)\r\n    }\r\n}\r\n\r\n// 请求拦截\r\naxios.interceptors.request.use(function (config) {\r\n    if (isAdmin) {\r\n        if (storageUtils.getAdminToken()) {\r\n            config.headers.Auth = storageUtils.getAdminToken()\r\n        }\r\n    } else {\r\n        if (storageUtils.getUserToken()) {\r\n            config.headers.Auth = storageUtils.getUserToken()\r\n        }\r\n    }\r\n    return config\r\n}, function (error) {\r\n    return Promise.reject(error)\r\n})\r\n\r\n// 响应拦截\r\naxios.interceptors.response.use(\r\n    response => {\r\n        if (response.data.code === 101) {\r\n            source.cancel()\r\n            // 跳转登录页\r\n            if (isAdmin) {\r\n                window.location.href = \"/dev/login\"\r\n            } else {\r\n                window.location.href = \"/user/login\"\r\n            }\r\n        }\r\n        return response\r\n    },\r\n    error => {\r\n        return Promise.reject(error)\r\n    }\r\n\r\n)\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}